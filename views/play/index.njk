<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>koddl.io - Main</title>

    <!-- Import Monoco Editor styling -->
    <link
      rel="stylesheet"
      data-name="vs/editor/editor.main"
      href="/public/monaco-editor-min/vs/editor/editor.main.css"
    />

    <link rel="stylesheet" href="/public/stylesheets/master.css" />
    <style>
      @import url('https://fonts.googleapis.com/css2?family=Inconsolata:wght@400;700&display=swap');
      body {
        height: 100vh;
        display: grid;
        color: var(--textcolor);
        background: var(--bgcolor);
      }
      main {
        width: 1280px;
        max-width: 100vw;
        height: 600px;
        max-height: calc(100vh - 3.7rem);
        place-self: center;
        display: grid;
        grid-template-columns: 10rem auto 18rem;
        grid-template-areas:
          'status status status'
          'players editor chat';
        font-family: 'Inconsolata', monospace;
      }
      .header-status {
        grid-area: status;
        background: var(--bgcolor-secondary);
        display: grid;
        grid-template-columns: 1fr auto 1fr;
        align-items: center;
      }
      .header-status > .timer-and-round {
        display: flex;
        align-items: center;
      }
      .header-status > .timer-and-round > #timer {
        font-size: 1.75em;
        width: 2.5rem;
        text-align: center;
      }
      .header-status > #word-to-guess {
        font-size: 1.125em;
        letter-spacing: 2px;
      }
      .header-status > #your-word {
        margin-right: 0.5rem;
        justify-self: end;
        opacity: 75%;
      }
      #sidebar-players {
        background: var(--bgcolor-secondary);
      }
      #sidebar-players > .player {
        display: flex;
        align-items: center;
      }
      #sidebar-players > .player > .position {
        width: 2.5rem;
        text-align: center;
      }
      #code-editor {
        grid-area: editor;
        min-width: 0;
        min-height: 0;
      }
      .sidebar-chat {
        min-height: 0;
        background: var(--bgcolor-tertiary);
        display: flex;
        flex-direction: column;
        justify-content: flex-end;
      }
      .sidebar-chat > #chat-log {
        overflow-y: auto;
      }
      .sidebar-chat > #chat-log > * {
        padding: 0.1rem 0.5rem;
      }
      .sidebar-chat > #chat-log .name {
        font-weight: bold;
      }
      .sidebar-chat > #chat-log > .message-info {
        background: rgba(61, 163, 181, 25%);
      }
      .sidebar-chat > #chat-log > .message-success {
        background: rgba(104, 232, 165, 25%); /* #3AB267 lux version */
      }
      .sidebar-chat > #chat-log > .message-passed > .name {
        color: var(--textcolor-success);
      }
      .sidebar-chat > #chat-form {
        margin: 0.5rem;
        display: grid;
        grid-template-columns: 1fr auto;
      }
      #wait-for-players,
      #wait-choosing-word,
      #pick-a-word,
      #turn-points-screen {
        grid-area: editor;
        place-self: stretch;
        z-index: 0;
        display: grid;
        place-items: center;
        align-content: center;
        text-align: center;
        background: rgba(0, 0, 0, 50%);
        color: var(--textcolor-button);
      }
      #pick-a-word,
      #wait-choosing-word,
      #turn-points-screen {
        display: none;
      }
      #pick-a-word * {
        margin: 0.25rem;
      }
      #turn-points-screen > #turn-answer {
        font-weight: bold;
        font-size: 1.125em;
        margin: 0.5rem 0;
      }
      #turn-points-screen > #answering-players > .player {
        display: flex;
        justify-content: space-between;
        column-gap: 0.5rem;
      }
    </style>
  </head>
  <body>
    <nav>
      <div class="combobox-group">
        <label for="theme-combobox">Theme:</label>
        <select name="" id="theme-combobox">
          <option value="">Noctis Sereno</option>
          <option value="noctis-lux">Noctis Lux</option>
        </select>
      </div>
    </nav>
    <main>
      <div class="header-status">
        <div class="timer-and-round">
          <div id="timer">65</div>
          <div id="round">Round 1 of 3</div>
        </div>
        <div id="word-to-guess">________</div>
        <div id="your-word"></div>
      </div>
      <div id="sidebar-players"></div>
      <div id="code-editor"></div>
      <div class="sidebar-chat">
        <div id="chat-log"></div>
        <form id="chat-form" action="">
          <input type="text" />
          <button type="submit">Send</button>
        </form>
      </div>
      <div id="wait-for-players">Menunggu pemain...</div>
      <div id="wait-choosing-word">sedang memilih kata...</div>
      <div id="pick-a-word">
        Pilih kata
        <div id="word-buttons"></div>
      </div>
      <div id="turn-points-screen">
        Jawaban:
        <div id="turn-answer"></div>
        <div id="answering-players">
          <div class="player">
            <div class="name">underpoint</div>
            <div class="points">20</div>
          </div>
          <div class="player">
            <div class="name">hii</div>
            <div class="points">19</div>
          </div>
          <div class="player">
            <div class="name">hiid</div>
            <div class="points">9</div>
          </div>
        </div>
      </div>
    </main>

    <!-- Import Socket.IO script -->
    <script src="/public/javascripts/socket.io/socket.io.min.js"></script>

    <!-- Import Monaco Editor script -->
    <script>
      var require = { paths: { vs: '/public/monaco-editor-min/vs' } }
    </script>
    <script src="/public/monaco-editor-min/vs/loader.js"></script>
    <script src="/public/monaco-editor-min/vs/editor/editor.main.nls.js"></script>
    <script src="/public/monaco-editor-min/vs/editor/editor.main.js"></script>

    <!-- Import and run shared script -->
    <script src="/public/javascripts/main.js"></script>

    <script>
      // Get the 'room' and 'name' URL parameter and send it on Socket.IO connection
      const room = new URLSearchParams(window.location.search).get('room')
      const name = new URLSearchParams(window.location.search).get('name')
      const socket = io({ query: { room, name } })

      // Monaco Editor variable
      const codeEditor = monaco.editor.create(document.getElementById('code-editor'), {
        language: 'javascript',
        automaticLayout: true,
        readOnly: true,
        theme: 'vs-dark',
        fontFamily: "'Inconsolata', monospace",
        letterSpacing: 0.2,
      })

      // Handle the code editor value sent from the server
      socket.on('server-send-code', (codeEditorValue) => {
        codeEditor.setValue(codeEditorValue)
      })

      // Handle incoming chat messages from server
      socket.on('server-send-message', (type, name, content) => {
        const messageElement = document.createElement('div')
        messageElement.className = type

        const messageName = document.createElement('span')
        messageName.className = 'name'
        messageName.textContent = `${name} `
        messageElement.appendChild(messageName)

        const messageContent = document.createElement('span')
        messageContent.className = 'content'
        messageContent.textContent = content
        messageElement.appendChild(messageContent)

        document.getElementById('chat-log').appendChild(messageElement)
        messageElement.scrollIntoView()
      })

      // Handle the ticking timer sent from the server
      socket.on('server-send-timer-tick', (timerNumber, hiddenWord) => {
        document.getElementById('timer').textContent = timerNumber
        document.getElementById('word-to-guess').textContent = hiddenWord
      })

      // Handle the round count (round ... of ...) sent from the server
      socket.on('server-send-roundcount', ([currentRound, maxRoundCount]) => {
        document.getElementById('round').textContent = `Round ${currentRound} of ${maxRoundCount}`
      })

      // Handle the 'Choosing a word...' screen sent from the server
      socket.on('server-send-choosing-word', (chooserDisplayName) => {
        document.getElementById('turn-points-screen').style.display = 'none'

        const waitChoosingWord = document.getElementById('wait-choosing-word')
        waitChoosingWord.textContent = `${chooserDisplayName} sedang memilih kata...`
        waitChoosingWord.style.display = 'grid'
      })

      // Handle the picklist (for picking words, duh) sent from the server
      socket.on('server-send-picklist', (pickList) => {
        document.getElementById('wait-choosing-word').style.display = 'none'

        const pickAWord = document.getElementById('pick-a-word')
        const wordButtons = document.getElementById('word-buttons')

        wordButtons.replaceChildren()
        pickList.forEach((wordToPick, index) => {
          const wordButton = document.createElement('button')
          wordButton.textContent = wordToPick
          wordButton.addEventListener('click', () => {
            socket.emit('client-send-picked-word', index)
          })
          wordButtons.appendChild(wordButton)
        })

        pickAWord.style.display = 'grid'
      })

      // Handle the request to hide the 'Choosing a word...' window from the server.
      socket.on('server-send-hide-choosing-word', () => {
        document.getElementById('wait-choosing-word').style.display = 'none'
      })

      // Event listener variable
      let editorEventListener

      // Handle the request to hide the pick-a-word window from the server. Allow code editor writing permission as well
      socket.on('server-send-hide-picklist', (pickedWord) => {
        codeEditor.updateOptions({ readOnly: false })
        document.getElementById('pick-a-word').style.display = 'none'
        document.getElementById('word-buttons').replaceChildren()
        document.getElementById('your-word').textContent = pickedWord

        // Send code editor value from client to server (TEMPORARY IMPLEMENTATION)
        editorEventListener = codeEditor.getModel().onDidChangeContent(() => {
          socket.emit('client-send-code', codeEditor.getValue())
        })
      })

      // Handle the current turn points list (for the end turn screen) sent from the server
      // Remember this event signifies the end of a turn. So we can disable code editor writing permission as well.
      socket.on('server-send-turn-pointslist', (turnPointsList, turnAnswer) => {
        // Unbind onDidChangeContent event listener
        if (editorEventListener !== undefined) editorEventListener.dispose()

        codeEditor.setValue('')
        codeEditor.updateOptions({ readOnly: true })
        document.getElementById('timer').textContent = 0
        document.getElementById('your-word').textContent = ''
        document.getElementById('turn-answer').textContent = turnAnswer
        const answeringPlayers = document.getElementById('answering-players')

        answeringPlayers.replaceChildren()
        turnPointsList.forEach((player) => {
          const playerElement = document.createElement('div')
          playerElement.className = 'player'

          const playerName = document.createElement('div')
          playerName.className = 'name'
          playerName.textContent = player.displayName
          playerElement.appendChild(playerName)

          const playerCurrentPoints = document.createElement('div')
          playerCurrentPoints.className = 'points'
          playerCurrentPoints.textContent = `+${player.currentPoints}`
          playerElement.appendChild(playerCurrentPoints)

          // Final append
          answeringPlayers.appendChild(playerElement)
        })

        document.getElementById('turn-points-screen').style.display = 'grid'
      })

      // Handle the playerlist (for the sidebar) sent from the server
      socket.on('server-send-playerlist', (playerlist) => {
        const sidebarPlayers = document.getElementById('sidebar-players')
        const waitForPlayers = document.getElementById('wait-for-players')

        sidebarPlayers.replaceChildren()
        playerlist.forEach((player) => {
          const playerElement = document.createElement('div')
          playerElement.className = 'player'

          const playerPosition = document.createElement('div')
          playerPosition.className = 'position'
          playerPosition.textContent = `#${player.position}`
          playerElement.appendChild(playerPosition)

          // Display name & points
          const playerInfo = document.createElement('div')
          playerInfo.className = 'info'

          const playerName = document.createElement('div')
          playerName.className = 'name'
          playerName.textContent = player.displayName
          if (player.isInTurn) playerName.style.fontWeight = 'bold'
          playerInfo.appendChild(playerName)

          const playerPoints = document.createElement('div')
          playerPoints.className = 'points'
          playerPoints.textContent = `Points: ${player.points}`
          playerInfo.appendChild(playerPoints)

          // Final appends
          playerElement.appendChild(playerInfo)
          sidebarPlayers.appendChild(playerElement)
        })

        // Hide wait-for-players overlay if there's more than 1 player
        if (playerlist.length > 1) waitForPlayers.style.display = 'none'
      })

      // Send chat messages from client to server
      document.getElementById('chat-form').addEventListener('submit', (event) => {
        event.preventDefault()
        const textInput = event.srcElement[0]
        if (textInput.value) {
          socket.emit('client-send-message', textInput.value)
          textInput.value = ''
        }
      })
    </script>
  </body>
</html>
